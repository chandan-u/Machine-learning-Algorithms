E[f(x)] = ${\frac{ 0.1 * 10 + 0.2 * 5 + 0.7 * 10/7}{1}}$
1-pbinom(2,89,0.3)
1-pbinom(0,1500,1)
pbinom(2,89,0.3)
p=pbinom(2,89,0.3)
1-pbinom(0,1500,p)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
which(brother_heights >=70)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
fivefootten=which(brother_heights >=70)
len(fivefootten)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
fivefootten=which(brother_heights >=70)
length(fivefootten)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
fivefootten=which(brother_heights >=70)
numberOf510 = length(fivefootten)
proportion = numberOf510/n
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
fivefootten=which(brother_heights >=70)
numberOf510 = length(fivefootten)
proportion = numberOf510/n
print(proportion)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
fivefootten=which(brother_heights >=70)
numberOf510 = length(fivefootten)
proportion = numberOf510/brother_count
print(proportion)
plot(sister_heights, brother_heights, pch=".")
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
lines(sister_heights.list, brother_heights.list, col="green")
abline(a, b, col="blue")
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
lines(sister_heights.list, brother_heights.list, col="green")
abline(a, b, col="blue")
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
#lines(sister_heights.list, brother_heights.list, col="green")
abline(a, b, col="blue")
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
#lines(sister_heights.list, brother_heights.list, col="green")
#abline(a, b, col="blue")
carol_height = 61
y = b * carol_height + a
print(y)
0.2727273b = sd(Weight) / sd(Height) ### THIS IS WRONG a = mean(Weight) - b * mean(Height) plot(Height, Weight, pch=".") lines(height.list, weight.list, col="green") abline(a, b, col="blue")
cleawr
cls
clear
clear()
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
#lines(sister_heights.list, brother_heights.list, col="green")
#abline(a, b, col="blue")
carol_height = 61
y = b
* carol_height + a
print(y)
b = sd(brother_heights) / sd(sister_heights)
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
#lines(sister_heights.list, brother_heights.list, col="green")
#abline(a, b, col="blue")
carol_height = 61
y = b * carol_height + a
print(y)
fivefeetone = which(sister_heights == 61)
fivefeetone = which(sister_heights == 61)
print(fivefeetone)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
pnorm(140, mean=predict.69, sd=pred.error)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
pnorm(140, mean=y, sd=pred.error)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
pnorm(70, mean=y, sd=pred.error)
r = cor(sister_heights, brother_heights)
r^2
r = cor(sister_heights, brother_heights)
r * r
r = cor(sister_heights, brother_heights)
r^2
model = lm(brother_heights ~ sister_heights)
summary(model)
.
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/n-2 )
m = sd(brother_heights)/sd(sister_heights) * r
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval, right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/n-2 )
m = sd(brother_heights)/sd(sister_heights) * r
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval)
print right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/n-2 )
m = sd(brother_heights)/sd(sister_heights) * r
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval)
print(right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/n-2 )
m = sd(brother_heights)/sd(sister_heights)
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval)
print(right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/n-2 )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval)
print(right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(left_interval)
print(right_inverval)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(m)
print(left_interval)
print(right_inverval)
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
(m + qt(0.975, df=15-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 13
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 20
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
-0.3609214
n = 40
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 200
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 700
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 10000000
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 10000000000000000000000000
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 2
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 5
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 11
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 13
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 14
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 15
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 100
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 100000000000000000000000000000000000
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 10000000000000000000000000000000000000000000000000000000000000000000
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.995, df=n-2) * se
right_inverval = m + qt(0.995, df=n-2) * se
print(m)
print(left_interval)
print(right_inverval)
q = qt(0.975, df=n-2)
l = 0.1
(2*q*se/l)**2
q = qt(0.975, df=n-2)
l = 0.1
#(2*q*se/l)**2
((2 * q * m * sqrt(1-r^2) )/0.1 )^2 + 2
q = qt(0.975, df=n-2)
l = 0.1
#(2*q*se/l)**2
((2 * q * m * sqrt(1-r^2) )/0.1 )^2 + 2
n=494.1507
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
q = qt(0.975, df=n-2)
l = 0.1
#(2*q*se/l)**2
((2 * q * m * sqrt(1-r^2) )/0.1 )^2 + 2
n=494.1507
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
x_i=1
pred.y = (b * x_i ) + a
pred.error = sd(y) * sqrt(1 - r^2)
1 - pnorm(3, mean=pred.y, sd=pred.error)
set.seed(2000002064) # use the numerical value of your Student ID
x = rnorm(500)
y = 2 * x + rnorm(500)
x_mean = mean(x)
y_mean = mean(y)
x_sd=sd(x)
y_sd=sd(y)
r=cor(x,y)
#we need the slope b and constanct c for y=bx+a
b = r * (y_sd/x_sd)
a =  y_mean - b * x_mean
# so the equation is y = bx + a for given x
x_i=1
pred.y = (b * x_i ) + a
pred.error = sd(y) * sqrt(1 - r^2)
1 - pnorm(3, mean=pred.y, sd=pred.error)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
1-pnorm(70, mean=y, sd=pred.error)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
1-pnorm(70, mean=y, sd=pred.error)
test1_mean = 75
test1_sd =  10
test2_mean = 64
test2_sd = 12
r = 0.5
# we need to compute the slope b and the intersection a:
b = r * (test2_sd/test1_sd)
a = test2_mean - b * test1_mean
# now y = bx + a is the prediction
# lets predict the score in test 2 for jill using the above linear model:
pred.jill_test2 = b * 80 + a
# we need to compute the slope b and the intersection a:
b = r * (test2_sd/test1_sd)
a = test2_mean - b * test1_mean
# now y = bx + a is the prediction
# lets predict the score in test 2 for jill using the above linear model:
pred.jill_test2 = b * 80 + a
print(pred.jill_test2)
# we need to compute the slope b and the intersection a:
b = r * (test1_sd/test2_sd)
a = test1_mean - (b * test2_mean)
# now y = bx + a is the prediction
# lets predict the score in test 2 for jill using the above linear model:
pred.jack_test1 = b * 76 + a
print(pred.jack_test1)
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
#fivefootten=which(brother_heights >=70)
#numberOf510 = length(fivefootten)
#proportion = numberOf510/brother_count
#print(proportion)
# Hence the proportion of brothers whose height is >= 70
1 - pnorm(70, mean = mean(bother_hieghts), sd = sd(brother_heights))
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
#fivefootten=which(brother_heights >=70)
#numberOf510 = length(fivefootten)
#proportion = numberOf510/brother_count
#print(proportion)
# Hence the proportion of brothers whose height is >= 70
1 - pnorm(70, mean = mean(brother_hieghts), sd = sd(brother_heights))
sister_count = 11
brother_count = 11
n = sister_count + brother_count
sister_heights = c(69,64,65,63,65,62,65,64,66,59,62)
brother_heights = c(71, 68, 66, 67, 70, 71, 70, 73, 72, 65, 66)
h = 70
# we havent inclueded count of sisters because (none of them are above 70)
#fivefootten=which(brother_heights >=70)
#numberOf510 = length(fivefootten)
#proportion = numberOf510/brother_count
#print(proportion)
# Hence the proportion of brothers whose height is >= 70
1 - pnorm(70, mean = mean(brother_heights), sd = sd(brother_heights))
r = cor(sister_heights, brother_heights)
b = r * (sd(brother_heights) / sd(sister_heights) )
### THIS IS WRONG
a = mean(brother_heights) - b * mean(sister_heights)
plot(sister_heights, brother_heights, pch=".")
#lines(sister_heights.list, brother_heights.list, col="green")
#abline(a, b, col="blue")
carol_height = 61
y = b * carol_height + a
print(y)
r = cor(sister_heights, brother_heights)
pred.error = sd(brother_heights) * sqrt(1 - r^2)
1-pnorm(70, mean=y, sd=pred.error)
r = cor(sister_heights, brother_heights)
r^2
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.95, df=n-2) * se
right_inverval = m + qt(0.95, df=n-2) * se
print(m)
print(left_interval)
print(right_inverval)
q = qt(0.975, df=n-2)
l = 0.1
#(2*q*se/l)**2
((2 * q * m * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
n=1188.345
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
q = qt(0.975, df=n-2)
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
n=1188.345
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
r = cor(sister_heights, brother_heights)
r^2
# we need to compute the slope b and the intersection a:
b = r * (test1_sd/test2_sd)
a = test1_mean - (b * test2_mean)
# now y = bx + a is the prediction
# lets predict the score in test 2 for jill using the above linear model:
pred.jack_test1 = b * 76 + a
print(pred.jack_test1)
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
n=1190.726
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
n=1190.726
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
qt(0.975, df=11-2)
n = 11
r = cor(sister_heights, brother_heights)
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
m =  r * (sd(brother_heights)/sd(sister_heights))
# so a 90 percent confidence interval for the the slop beta is:
left_interval = m - qt(0.95, df=n-2) * se
right_inverval = m + qt(0.95, df=n-2) * se
print(m)
print(left_interval)
print(right_inverval)
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
n=1190.726
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
#n=1190.726
#se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
#(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
# we need to compute the slope b and the intersection a:
b = r * (test2_sd/test1_sd)
a = test2_mean - b * test1_mean
# now y = bx + a is the prediction
# lets predict the score in test 2 for jill using the above linear model:
pred.jill_test2 = b * 80 + a
print(pred.jill_test2)
n=11
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/0.1 )^2 + 2
# validation
#n=1190.726
#se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
#(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n=11
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/ 0.1 )^2 + 2
# validation
#n=1190.726
#se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
#(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
n=11
q = qt(0.975, df=n-2)
q
l = 0.1
#(2*q*se/l)**2
((2 * q * (sd(brother_heights)/sd(sister_heights)) * sqrt(1-r^2) )/ 0.1 )^2 + 2
# validation
n=175
se = (sd(brother_heights)/sd(sister_heights)) * sqrt( (1-(r^2))/(n-2) )
(m + qt(0.975, df=n-2) * se) - (m - qt(0.975, df=n-2) * se)
setwd("~/classwork/machine_learning/Assignment4")
errors = c(63.98, 23.02,  24.06,  35.36,  23.74,  23.76,  23.1,   23.18,  22.24,  22.92)
qqnorm(errors)
t.test(errors, mu= mean(errors))
errors = c(63.98, 23.02,  24.06,  35.36,  23.74,  23.76,  23.1,   23.18,  22.24,  22.92)
qqnorm(errors)
t.test(errors, mu= mean(errors))
errors = c(74.62,  26.38,  30.28,  34.3,   71.9,   18.3,   26.38,  23.16,  25.56,  42.68)
qqnorm(errors)
t.test(errors, mu= mean(errors))
